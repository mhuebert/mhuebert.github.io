;; Analyzed by ClojureScript 1.7.36
{:use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros, run! reagent.ratom}, :excludes #{}, :name cells.cell-helpers, :imports nil, :requires {cells cells.cells, xhr goog.net.XhrIo, goog.net.XhrIo goog.net.XhrIo, reagent.core reagent.core, r reagent.core, cells.state cells.state, cljs.core.async cljs.core.async, layout cells.layout, state cells.state, cells.cells cells.cells, cljs.reader cljs.reader, cells.layout cells.layout}, :uses {clear-intervals! cells.cells, self-id cells.state, <! cljs.core.async, self cells.state, chan cljs.core.async, sources cells.state, cursor reagent.core, >! cljs.core.async, read-string cljs.reader, values cells.state, put! cljs.core.async}, :defs {interval {:protocol-inline nil, :meta {:file "/Users/MattPro/Dropbox/Sites/cells/src/cells/cell_helpers.cljs", :line 61, :column 7, :end-line 61, :end-column 15, :arglists (quote ([f] [n f])), :doc "Calls the provided function every n milliseconds and sets the current cell's\n  value to the result.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [n f]), :arglists ([f] [n f]), :arglists-meta (nil nil)}}, :name cells.cell-helpers/interval, :variadic false, :file "src/cells/cell_helpers.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([f] [n f]), :arglists ([f] [n f]), :arglists-meta (nil nil)}, :method-params ([f] [n f]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 61, :max-fixed-arity 2, :fn-var true, :arglists ([f] [n f]), :doc "Calls the provided function every n milliseconds and sets the current cell's\n  value to the result."}, slurp {:protocol-inline nil, :meta {:file "/Users/MattPro/Dropbox/Sites/cells/src/cells/cell_helpers.cljs", :line 76, :column 7, :end-line 76, :end-column 12, :arglists (quote ([path] [opts path])), :doc "Initiates an ajax request for the given path and sets the current cell's\n  value to the result.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([path] [opts path]), :arglists ([path] [opts path]), :arglists-meta (nil nil)}}, :name cells.cell-helpers/slurp, :variadic false, :file "src/cells/cell_helpers.cljs", :end-column 12, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([path] [opts path]), :arglists ([path] [opts path]), :arglists-meta (nil nil)}, :method-params ([path] [opts path]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 76, :max-fixed-arity 2, :fn-var true, :arglists ([path] [opts path]), :doc "Initiates an ajax request for the given path and sets the current cell's\n  value to the result."}, md {:protocol-inline nil, :meta {:file "/Users/MattPro/Dropbox/Sites/cells/src/cells/cell_helpers.cljs", :line 23, :column 7, :end-line 23, :end-column 9, :arglists (quote ([source])), :doc "Parses markdown and returns html."}, :name cells.cell-helpers/md, :variadic false, :file "src/cells/cell_helpers.cljs", :end-column 9, :method-params ([source]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([source])), :doc "Parses markdown and returns html."}, html {:protocol-inline nil, :meta {:file "/Users/MattPro/Dropbox/Sites/cells/src/cells/cell_helpers.cljs", :line 28, :column 7, :end-line 28, :end-column 11, :arglists (quote ([source])), :doc "Inserts a string as html into the cell."}, :name cells.cell-helpers/html, :variadic false, :file "src/cells/cell_helpers.cljs", :end-column 11, :method-params ([source]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 28, :max-fixed-arity 1, :fn-var true, :arglists (quote ([source])), :doc "Inserts a string as html into the cell."}, value {:protocol-inline nil, :meta {:file "/Users/MattPro/Dropbox/Sites/cells/src/cells/cell_helpers.cljs", :line 17, :column 7, :end-line 17, :end-column 12, :arglists (quote ([id])), :doc "Returns the value of a cell."}, :name cells.cell-helpers/value, :variadic false, :file "src/cells/cell_helpers.cljs", :end-column 12, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :doc "Returns the value of a cell."}, source {:protocol-inline nil, :meta {:file "/Users/MattPro/Dropbox/Sites/cells/src/cells/cell_helpers.cljs", :line 37, :column 7, :end-line 37, :end-column 13, :arglists (quote ([id])), :doc "Returns the source of a cell."}, :name cells.cell-helpers/source, :variadic false, :file "src/cells/cell_helpers.cljs", :end-column 13, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 37, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :doc "Returns the source of a cell."}, value! {:protocol-inline nil, :meta {:file "/Users/MattPro/Dropbox/Sites/cells/src/cells/cell_helpers.cljs", :line 42, :column 7, :end-line 42, :end-column 13, :arglists (quote ([id val])), :doc "Sets the value of a cell."}, :name cells.cell-helpers/value!, :variadic false, :file "src/cells/cell_helpers.cljs", :end-column 13, :method-params ([id val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id val])), :doc "Sets the value of a cell."}, hiccup {:protocol-inline nil, :meta {:file "/Users/MattPro/Dropbox/Sites/cells/src/cells/cell_helpers.cljs", :line 12, :column 7, :end-line 12, :end-column 13, :arglists (quote ([source])), :doc "Convert hiccup into html"}, :name cells.cell-helpers/hiccup, :variadic false, :file "src/cells/cell_helpers.cljs", :end-column 13, :method-params ([source]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([source])), :doc "Convert hiccup into html"}, source! {:protocol-inline nil, :meta {:file "/Users/MattPro/Dropbox/Sites/cells/src/cells/cell_helpers.cljs", :line 50, :column 7, :end-line 50, :end-column 14, :arglists (quote ([id val])), :doc "Sets the source of a cell."}, :name cells.cell-helpers/source!, :variadic false, :file "src/cells/cell_helpers.cljs", :end-column 14, :method-params ([id val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 50, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id val])), :doc "Sets the source of a cell."}, new-cell! {:protocol-inline nil, :meta {:file "/Users/MattPro/Dropbox/Sites/cells/src/cells/cell_helpers.cljs", :line 94, :column 7, :end-line 94, :end-column 16, :arglists (quote ([] [opts])), :doc "Creates a new cell, adds a view for the cell to the current layout, and returns the new cell's id.", :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}}, :name cells.cell-helpers/new-cell!, :variadic false, :file "src/cells/cell_helpers.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 1, :method-params ([] [opts]), :arglists ([] [opts]), :arglists-meta (nil nil)}, :method-params ([] [opts]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists ([] [opts]), :doc "Creates a new cell, adds a view for the cell to the current layout, and returns the new cell's id."}, self! {:protocol-inline nil, :meta {:file "/Users/MattPro/Dropbox/Sites/cells/src/cells/cell_helpers.cljs", :line 56, :column 7, :end-line 56, :end-column 12, :arglists (quote ([val])), :doc "Sets the value of the current cell."}, :name cells.cell-helpers/self!, :variadic false, :file "src/cells/cell_helpers.cljs", :end-column 12, :method-params ([val]), :protocol-impl nil, :arglists-meta (nil nil), :column nil, :line nil, :end-line 56, :max-fixed-arity 1, :fn-var true, :arglists (quote ([val])), :doc "Sets the value of the current cell."}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, reagent.ratom reagent.ratom}, :cljs.analyzer/constants {:seen #{:fn :else :as :recur :hiccup :id :class :json->clj :__html :json :keywordize-keys :dangerouslySetInnerHTML :text :span}, :order [:hiccup :span :class :dangerouslySetInnerHTML :__html :as :fn :else :text :json->clj :keywordize-keys :json :id :recur]}, :doc nil}